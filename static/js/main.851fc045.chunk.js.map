{"version":3,"sources":["components/MessageList.js","components/RoomList.js","action/action.js","action/types.js","components/SendMessageForm.js","components/NewRoomForm.js","components/InsertUser.js","reducer/reducer.js","reducer/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["MessageList","currentGroup","this","props","messages","chats","filter","chat","groupId","id","react_default","a","createElement","className","map","message","nameuser","Component","connect","state","reducer","currentUser","RoomList","item","changeCurrentGroup","_this","console","log","groups","key","style","backgroundColor","onClick","handleGroupItem","bind","title","group","dispatch","type","payload","SendMessageForm","e","setState","target","value","preventDefault","addChat","userName","onSubmit","handleNewMessage","onChange","handleChange","placeholder","required","newChat","NewRoomForm","groupname","s4","Math","floor","random","toString","substring","addGroup","generateID","handleOnSubmit","handleOnChange","newGroup","InsertUser","user","addUser","userId","handleAdduser","newUser","initialState","users","combineReducers","arguments","length","undefined","action","Object","objectSpread","concat","toConsumableArray","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","components_RoomList","components_MessageList","components_SendMessageForm","components_InsertUser","components_NewRoomForm","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.851fc045.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\n\n\nclass MessageList extends Component {\n  render() {\n      const { currentGroup } = this.props;\n      const messages = this.props.chats.filter(chat => {\n          return chat.groupId === currentGroup.id\n      })\n    return (\n        \n      <div className=\"message-list\">\n      {\n          messages.map(message => {\n              return <div className=\"message\"><div className='message-username'>{message.nameuser}</div>\n              <div className='message-text'>\n              {message.message}</div></div>\n          })\n          }\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n    chats: state.reducer.chats,\n    currentGroup: state.reducer.currentGroup,\n    currentUser: state.reducer.currentUser\n  \n  });\nexport default connect(mapStateToProps)(MessageList)","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { changeCurrentGroup } from '../action/action'\n\n\nclass RoomList extends Component {\n\n\n  handleGroupItem(item) {\n  this.props.changeCurrentGroup(item)\n  if (this.props.currentGroup){\n        \n      \n    }\n\n  }\n  render() {\n    const { currentGroup } = this.props;\n    console.log('group', this.props.groups)\n    return (\n      <div className=\"room-list\">\n          <h2>Room List</h2>\n          <div className=\"content-room\">\n          {\n            this.props.groups.map(item => {\n              return <button className=\"btnGroupList\"key={item.id} style={currentGroup.id === item.id ? { backgroundColor: '#3f4144' } :{}}\n              onClick={this.handleGroupItem.bind(this, item)}>{item.title}</button>\n            })\n          }\n          </div>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n  groups: state.reducer.groups,\n  currentGroup: state.reducer.currentGroup\n});\nexport default connect(mapStateToProps, {changeCurrentGroup})(RoomList);","import { ADD_GROUP, CHANGE_CURRENT_GROUP, CHANGE_USER, ADD_USER ,ADD_CHAT } from './types';\n\n\nexport const addGroup = (newGroup) => dispatch => {\n    dispatch({\n        type: ADD_GROUP,\n        payload: newGroup\n\n    })\n};\n\nexport const changeCurrentGroup = (group) => dispatch => {\n    dispatch({\n        type: CHANGE_CURRENT_GROUP,\n        payload: group\n\n    })\n};\n\nexport const addUser = (newUser) => dispatch => {\n    dispatch({\n        type: CHANGE_USER,\n        payload: newUser\n\n    })\n};\n\nexport const addNewUser = (user) => dispatch => {\n    dispatch({\n        type: ADD_USER,\n        payload: user\n\n    })\n};\n\nexport const addChat = (newChat) => dispatch => {\n    dispatch({\n        type: ADD_CHAT,\n        payload: newChat\n\n    })\n};","export const ADD_GROUP = 'ADD_GROUP'\nexport const CHANGE_CURRENT_GROUP = 'CHANGE_CURRENT_GROUP'\n\nexport const ADD_USER = 'ADD_USER'\nexport const CHANGE_USER = 'CHANGE_USER'\n\nexport const ADD_CHAT = 'ADD_CHAT'\n","import React, { Component } from 'react'\nimport{ connect } from 'react-redux';\n\nimport { addChat } from '../action/action'\n\nclass SendMessageForm extends Component {\n    state = {\n      message: '',\n    }\n\n  \n\n  handleChange(e) {\n    this.setState({\n      message: e.target.value\n    })\n  }\n  handleNewMessage(e) {\n    console.log(this.state.message)\n    e.preventDefault()\n    this.props.addChat({\n      groupId: this.props.currentGroup.id ,\n      nameuser: this.props.currentUser.userName,\n      message: this.state.message\n      \n    })\n    this.setState({\n      message:''\n    })\n  }\n  \n  render() {\n    return (\n      \n       <form\n        className=\"send-message-form\"\n        onSubmit={this.handleNewMessage.bind(this)}\n       >\n          <input \n            onChange={this.handleChange.bind(this)}\n            value={this.state.message}\n            type=\"text\"\n            placeholder=\"Type Message\"\n            required\n         />\n        </form>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n  currentUser: state.reducer.currentUser,\n  currentGroup: state.reducer.currentGroup,\n\n});\nexport default connect(mapStateToProps, { addChat })(SendMessageForm) ","import React, { Component } from 'react'\nimport{ connect } from 'react-redux';\n\nimport { addGroup } from '../action/action';\n\nclass NewRoomForm extends Component {\n  state = { groupname: '' }\n  \n  generateID(){\n      function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n          .toString(16)\n          .substring(1);\n      }\n      return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  handleOnSubmit(e) {\n    e.preventDefault()\n    this.props.addGroup({\n      id: this.generateID(),\n      title: this.state.groupname\n    })\n    this.setState({\n      groupname: ''\n    })\n  }\n  handleOnChange(e) {\n    this.setState({\n      groupname: e.target.value\n    })\n  }\n  render() {\n    return (\n      <div className=\"new-room-form\">\n        <form  onSubmit={this.handleOnSubmit.bind(this)}>\n            <input \n                className='inputGroup'\n                onChange={this.handleOnChange.bind(this)}\n                type='text'\n                placeholder='NewRoom'\n                value={this.state.groupname}\n                required\n            />\n        </form>\n      </div>\n      \n    )\n  }\n}\nexport default connect(null, { addGroup })(NewRoomForm);","import React, { Component } from 'react'\nimport{ connect } from 'react-redux';\n\nimport { addUser } from '../action/action'\n\nclass InsertUser extends Component {\n  state ={ user: '' }\n \n  generateID(){\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n\n  handleAdduser(e) {\n    e.preventDefault()\n\n    this.props.addUser({\n      userId: this.generateID(),\n      userName: this.state.user\n\n    })\n    this.setState({\n      user:''\n    })\n\n  }\n\n  handleChange(e) {\n    this.setState({\n      user: e.target.value\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"insert-user\">\n      <form  onSubmit={this.handleAdduser.bind(this)}>\n        <input\n        onChange={this.handleChange.bind(this)}\n        type=\"text\"\n        value={this.state.user}\n        placeholder=\"Insert User\"\n        required/>\n        </form>\n        <span>UserName: {this.props.currentUser.userName}\n        </span>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n  currentUser: state.reducer.currentUser,\n});\nexport default connect(mapStateToProps,{addUser})(InsertUser)","import { ADD_GROUP, CHANGE_CURRENT_GROUP, CHANGE_USER, ADD_USER, ADD_CHAT} from '../action/types';\n\nconst initialState ={\n    chats: [],\n    groups: [],\n    users:[],\n    currentGroup:{},\n    currentUser:{}\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case ADD_GROUP:\n        return {\n            ...state,\n            groups: [ ...state.groups, action.payload ]\n        }\n        \n        case CHANGE_CURRENT_GROUP:\n        return {\n            ...state,\n            currentGroup: action.payload\n        }\n\n        case ADD_USER:\n        return {\n            ...state,\n            newUser: [...state.users, action.payload]\n        }\n\n        case CHANGE_USER:\n        return {\n            ...state,\n            currentUser: action.payload\n        }\n\n        case ADD_CHAT:\n        return {\n            ...state,\n            chats: [...state.chats, action.payload]\n        }\n        default: \n        return state;\n    }\n}","import { combineReducers } from 'redux';\nimport reducer from './reducer';\n\nexport default combineReducers({\n    reducer,\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducer'\n\n\nconst initialState = {};\n\nconst middleware = [thunk];\nconst store = createStore(\n    rootReducer,\n    initialState, \n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )   \n    );\n\nexport default store;","import React, { Component } from 'react';\nimport { Provider } from 'react-redux'\nimport './App.css';\nimport MessageList from './components/MessageList';\nimport RoomList from './components/RoomList';\nimport SendMessageForm from './components/SendMessageForm';\nimport NewRoomForm from './components/NewRoomForm';\nimport InsertUser from './components/InsertUser';\n\nimport store from './store'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n      <div className=\"App\">\n        <RoomList />\n        <MessageList />\n        <SendMessageForm />        \n        <InsertUser />\n        <NewRoomForm />\n      </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<App />,\ndocument.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}